# Fuzzy-Search API

**FastAPI** • **SQLite** • **SQLAlchemy** • **JWT-Authentication**

---
## Быстрый запуск с помощью скрипта

**Windows PowerShell**  
1. Откройте PowerShell и перейдите в папку проекта:
   ```powershell
   cd $env:USERPROFILE\fuzzy-search-api

Разрешите выполнение скриптов:
Set-ExecutionPolicy -Scope Process -ExecutionPolicy RemoteSigned -Force

Запустите автоматическую установку и старт:
.\run_fuzzy_project.ps1

Используйте Swagger UI:
http://127.0.0.1:8000/docs

Скрипт:

Клонирует репозиторий (если нужно)

Создаёт и активирует venv

Устанавливает зависимости

Запускает scripts\init_db.py для создания таблиц

Стартует сервер Uvicorn с --reload
---

## Оглавление

1. [Описание проекта]
2. [Структура каталогов]
3. [Быстрый запуск с помощью скрипта]
4. [Ручной запуск (Bash / PowerShell)]
5. [Доступные эндпоинты]
6. [Архитектура и слои приложения]
7. [Тестирование]

---

## Описание проекта

REST-API на FastAPI для поиска по загруженным корпусам текстов.  
Поддерживает:
- Регистрацию и логин по email/паролю  
- JWT-аутентификацию с автоматической защитой маршрутов  
- Загрузку и хранение корпусов (SQLite)  
- Запуск алгоритмов поиска (Levenshtein, N-gram)  

---

## Структура каталогов
fuzzy-search-api/
├── alembic/ # миграции (необязательно, можно использовать init_db)
├── app/
│ ├── api/
│ │ ├── auth.py # /auth/signup, /auth/token, /auth/me
│ │ ├── corpus_api.py # /corpus/ (upload, list)
│ │ └── algorithm_api.py# /algorithm/search
│ ├── core/
│ │ ├── config.py # настройки (DB URL, JWT secret)
│ │ └── security.py # JWT, хеш пароля, Depends-функции
│ ├── db/
│ │ └── session.py # engine, SessionLocal, Base
│ ├── models/
│ │ └── user.py # SQLAlchemy User
│ ├── schemas/
│ │ └── auth.py # Pydantic-схемы UserCreate, UserRead, Token
│ ├── cruds/
│ │ └── user.py # get_user, create_user
│ ├── services/
│ │ └── algorithms.py # search_levenshtein, search_ngrams
│ └── main.py # точка входа, сборка приложения
├── scripts/
│ └── init_db.py # создаёт все таблицы через Base.metadata.create_all()
├── run_fuzzy_project.ps1 # PowerShell-скрипт автоматического развёртывания
├── requirements.txt # зависимости
└── README.md # этот файл

---

## Доступные эндпоинты
Auth
Метод	Путь	Описание
POST	/auth/signup	Регистрация (email, password)
POST	/auth/token	Логин → возвращает JWT
GET	/auth/me	Данные текущего пользователя

Corpus
Метод	Путь	Описание
POST	/corpus/	Загрузить новый корпус
GET	/corpus/	Список всех корпусов

Algorithm
Метод	Путь	Описание
POST	/algorithm/search	Поиск: {"corpus_id":1,"algorithm":"levenshtein","query":"text"}

Архитектура и слои приложения
main.py
Сборка приложения: роутеры, OpenAPI (JWT-security).

api/
HTTP-маршруты (APIRouter), связывают запросы с бизнес-логикой.

schemas/
Pydantic-модели для входа/выхода: валидация, документация, скрытие внутренних полей.

core/
Конфигурации и зависимости:

config.py (DB, JWT-настройки)

security.py (JWT-логика, пароли, Depends)

db/
Настройка SQLAlchemy: engine, SessionLocal, Base.

models/
ORM-классы (таблицы).

cruds/
Простой слой доступа к данным (SELECT, INSERT).

services/
Бизнес-логика и алгоритмы (поиск).

scripts/
Утилиты для администрирования (init_db).

Тестирование
Используйте Swagger UI:
http://127.0.0.1:8000/docs
